/* autogenerated by Processing revision 1276 on 2021-12-05 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class CloudShooter extends PApplet {

CloudsGen c1;
CloudsGen c2;
CloudsGen c3;
Player p1;
Bullets b1;
//Enemy e1;

 public void setup() {

    frameRate(60);

    /* size commented out by preprocessor */;
    
    //nuvem 1
    c1 = new CloudsGen("cloud1.png", 100, random(height));
    //nuvem 2
    c2 = new CloudsGen("cloud2.png", 200, random(height));
    //nuvem 3
    c3 = new CloudsGen("cloud3.png", 300, random(height));
    //player 1
    p1 = new Player("f16.png", 0, 0, 20);
    //bullet 1
    b1 = new Bullets("bullet.png", 650, 350/2, 20);
    
}

//quero adicionar um background que vai mudando a HUE de modo a ser dia/noite

//desenhar os elementos do programa no ecra
 public void draw(){
    background(0, 80, 255);
    c1.drawme();
    c2.drawme();
    c3.drawme();
    c1.move();
    c2.move();
    c3.move();
    p1.drawme();
    b1.drawme();
}

//tenho que validar se a bala atinge o objeto dentro do draw
 public void keyPressed(){
//falta por a bala a mover e redimensionar a imagem corretamente.
    if(key == ' '){
        p1.shoot();
    }

    if(key == 's'|| key == 'S'){
        p1.movedown();
    }
    
    if(key == 'w'|| key == 'W'){
        p1.moveup(); 
    }

    if(key == 'a'|| key == 'A'){
        p1.moveleft();
    }

    if(key == 'd'|| key == 'D'){
        p1.moveright();
    }

}

//acresventar pontuacao na tabela
     public void score(){
    
    }

//tabela de pontuacao
     public void highscore(){

    }

//no more lifelines calls this.
     public void gameOver(){

    }

//going through all the lifelines and leves without dying, calls this.    
 public void gameWon(){

    }

//if the player loses the level this gets called and he loses a lifeline
     public void gameLost(){

    }
class Bullets{

    //propriedades
    PImage bullet;
    float posX, posY, tam;

    //construtor
    Bullets(String name, float x, float y, float t){
        bullet = loadImage(name);
        posX = x;
        posY = y;
        tam = t;
    }

//metodos

//desenhar as balas no ecra
     public void drawme() {

        bullet.resize(100,25);
        //desenhar fora do canvas
        image(bullet, -650, -650);
        p1.altura = p1.img.height/2;
        p1.largura = p1.img.width/2;
        
    }
//mover a ellipse
     public void moveme(){
        //atualizar posicao para parecer spawn a partir da nave
        image(bullet, p1.largura, p1.altura); //substituir altura e largura por variaveis
    }
}
class CloudsGen{

    PImage img;
    float posX, posY;

    CloudsGen(String nome, float x, float y){
        img = loadImage(nome);
        posX = x;
        posY = y;
    }

     public void drawme(){
        image(img, posX, posY);  
    }

     public void move(){
        if(posX > -img.width){
            posX -= random(2, 25);
        }
        else{
            posX = width;
            posY = random(height);
        }
        
    }

}
class Enemy{

    //propriedades

    //constructor
    Enemy(){

        

    }

     public void drawme(){



    }

}
class Player{

    //Properties
    float altura, largura;
    PImage img;
    PImage img2;
    PImage img3;
    float posX, posY, tam;;
    boolean moveUp, moveDown, moveLeft, moveRight;
    
    //Constructor
    Player(String n, float x, float y, float t){
        img = loadImage(n);
        posX = x;
        posY = y;
        tam = t;
    }
    
//spawn da imagem mediante parametros indicados
     public void drawme(){
        img.resize(650,350);
        image(img, posX, posY);
    }

//tenho que adicionar movimento com variaveis boleanas para ser smooth

//damage radius
 public void damage(){

}

 public void shoot (){
    b1.moveme();
}

//validar posicao e incremento da mesma caso tecla seja pressionada
     public void movedown(){ 
    
            if (posY < height){
                posY += tam;
            }
    }

//validar posicao e incremento da mesma caso tecla seja pressionada
     public void moveup(){
        while(!moveDown){
            if (posY > 0){
                posY -= tam;
            }
        }
    }

//validar posicao e incremento da mesma caso tecla seja pressionada
     public void moveleft(){
        if (posX > 0){
            posX -= tam;
        }
    }

//validar posicao e incremento da mesma caso tecla seja pressionada
     public void moveright(){
        if (posX < width){
            posX += tam;
        }
    }
}


  public void settings() { fullScreen(2); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "CloudShooter" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
